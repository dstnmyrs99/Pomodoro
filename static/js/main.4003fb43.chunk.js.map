{"version":3,"sources":["utils/duration/index.js","pomodoro/Duration.js","pomodoro/Play.js","utils/class-names/index.js","pomodoro/Timer.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Duration","type","time","setTime","high","low","inSession","increment","focus","toLowerCase","handleClick","change","className","data-testid","onClick","Play","classNameToBoolean","isTimerRunning","playPause","resetSession","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","Timer","focusTime","remainingTime","currentSession","breakTime","paused","percent","givenSeconds","seconds","round","secondsToDuration","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","initialState","Focus","Break","remaining","running","useState","session","setSession","handleDurationChange","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","oldSession","Audio","process","play","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4003fb43.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nimport  {PropTypes}  from 'prop-types';\r\n\r\nfunction Duration({ type, time, setTime, high, low, inSession, increment }) {\r\n  //line 6 is only for qualified testing purposes\r\n  const focus = type.toLowerCase();\r\n  const handleClick = (change) => {\r\n    if (!inSession) setTime(type, change);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid={`duration-${focus}`}>\r\n          {/* TODO: Update this text to display the current focus session duration */}\r\n          {type} Duration: {minutesToDuration(time)}\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid={`decrease-${focus}`}\r\n            onClick={() => {\r\n              if (time > low) handleClick(-increment);\r\n            }}\r\n          >\r\n            <span className=\"oi oi-minus\" />\r\n          </button>\r\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid={`increase-${focus}`}\r\n            onClick={() => {\r\n              if (time < high) handleClick(increment);\r\n            }}\r\n          >\r\n            <span className=\"oi oi-plus\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nDuration.propTypes = {\r\ntype: PropTypes.string,\r\ntime: PropTypes.number,\r\nsetTime: PropTypes.func,\r\nhigh: PropTypes.number,\r\nlow: PropTypes.number,\r\ninSession: PropTypes.bool,\r\nincrement: PropTypes.number\r\n};\r\n\r\nexport default Duration;\r\n","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport  {PropTypes}  from 'prop-types';\r\n\r\nfunction Play({ isTimerRunning, playPause, resetSession, inSession }) {\r\n  const handleReset = () => {\r\n    if (inSession) resetSession();\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !isTimerRunning,\r\n                \"oi-media-pause\": isTimerRunning,\r\n              })}\r\n            />\r\n          </button>\r\n          {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            title=\"Stop the session\"\r\n            onClick={handleReset}\r\n          >\r\n            <span className=\"oi oi-media-stop\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPlay.propTypes = {\r\n    isTimerRunning: PropTypes.bool,\r\n    playPause: PropTypes.func,\r\n    resetSession: PropTypes.func,\r\n    inSession: PropTypes.bool,\r\n    };\r\nexport default Play;\r\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\nimport  {PropTypes}  from 'prop-types';\r\n\r\nfunction Timer({\r\n  focusTime,\r\n  remainingTime,\r\n  isTimerRunning,\r\n  inSession,\r\n  currentSession,\r\n  breakTime,\r\n}) {\r\n  const paused = isTimerRunning ? \"\" : \"PAUSED\";\r\n  const time = currentSession === \"On Break\" ? breakTime : focusTime;\r\n  const percent = `${((time * 60 - remainingTime) / (time * 60)) * 100}%`;\r\n\r\n  if (inSession) {\r\n    return (\r\n      <>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {currentSession} for {minutesToDuration(time)} minutes\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(remainingTime)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <h2>{paused}</h2>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: percent }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n    focusTime: PropTypes.number,\r\n    remainingTime: PropTypes.number,\r\n    isTimerRunning: PropTypes.bool,\r\n    currentSession: PropTypes.string,\r\n    breakTime: PropTypes.number,\r\n    inSession: PropTypes.bool,\r\n    };\r\n\r\nexport default Timer;\r\n","import React, { useState } from \"react\";\n//import classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Duration from \"./Duration\";\nimport Play from \"./Play\";\nimport Timer from \"./Timer\";\n\nfunction Pomodoro() {\n  const initialState = {\n    Focus: 25,\n    Break: 5,\n    remaining: 1500,\n    running: false,\n    inSession: false,\n    currentSession: \"Focusing\",\n  };\n  // Timer starts out paused\n  const [session, setSession] = useState(initialState);\n\n  const handleDurationChange = (type, change) => {\n    setSession((currentSession) => ({\n      ...currentSession,\n      [type]: session[type] + change,\n    }));\n    if (type === \"Focus\") {\n      setSession((currentSession) => ({\n        ...currentSession,\n        remaining: currentSession.Focus * 60,\n      }));\n    }\n  };\n\n  const resetSession = () => {\n    setSession(initialState);\n  };\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setSession((oldSession) => {\n        return { ...oldSession, remaining: oldSession.remaining - 1 };\n      });\n      if (session.remaining <= 0) {\n        new Audio(`${process.env.PUBLIC_URL}/alarm/timerUp.wav`).play();\n        setSession((oldSession) => {\n          if (oldSession.currentSession === \"Focusing\") {\n            return {\n              ...oldSession,\n              currentSession: \"On Break\",\n              remaining: session.Break * 60,\n            };\n          } else {\n            return {\n              ...oldSession,\n              currentSession: \"Focusing\",\n              remaining: session.Focus * 60,\n            };\n          }\n        });\n      }\n    },\n    session.running ? 1000 : null\n  );\n\n  function playPause() {\n    setSession({ ...session, running: !session.running, inSession: true });\n  }\n\n  return (\n    <>\n      <div className=\"pomodoro\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Duration\n              type=\"Focus\"\n              time={session.Focus}\n              setTime={handleDurationChange}\n              high={60}\n              low={5}\n              inSession={session.inSession}\n              increment={5}\n            />\n          </div>\n          <div className=\"col\">\n            <div className=\"float-right\">\n              <Duration\n                type=\"Break\"\n                time={session.Break}\n                setTime={handleDurationChange}\n                high={15}\n                low={1}\n                inSession={session.inSession}\n                increment={1}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <Play\n            isTimerRunning={session.running}\n            playPause={playPause}\n            resetSession={resetSession}\n            inSession={session.inSession}\n          />\n        </div>\n        <Timer\n          focusTime={session.Focus}\n          breakTime={session.Break}\n          remainingTime={session.remaining}\n          isTimerRunning={session.running}\n          inSession={session.inSession}\n          currentSession={session.currentSession}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}